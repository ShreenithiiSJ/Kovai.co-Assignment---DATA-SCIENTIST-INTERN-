# -*- coding: utf-8 -*-
"""KOVAI.CO Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U6TdEhmZhOE0CxgqZ5Mklhi1Ftp_X6AO
"""

import pandas as pd
file_path = '/content/Daily_Public_Transport_Passenger_Journeys_by_Service_Type_20250603.csv'
df = pd.read_csv(file_path)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')
df = df.dropna(subset=['Date'])
df['Day'] = df['Date'].dt.day_name()
df['is_weekend'] = df['Day'].isin(['Saturday', 'Sunday'])
melted_df = df.melt(
    id_vars=['Date', 'Day', 'is_weekend'],
    value_vars=['Local Route', 'Light Rail', 'Peak Service', 'Rapid Route', 'School', 'Other'],
    var_name='Service Type',
    value_name='Journeys'
)

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df['Month'] = df['Date'].dt.month
monthly_data = df.groupby("Month").sum(numeric_only=True)
plt.figure(figsize=(12, 6))
for column in ["Local Route", "Light Rail", "Peak Service", "Rapid Route", "School"]:
    plt.plot(monthly_data.index, monthly_data[column], marker="o", label=column)
plt.xlabel("Month")
plt.ylabel("Passenger Journeys")
plt.title("Monthly Seasonal Trends in Public Transport Usage")
plt.legend()
plt.grid()
plt.show()

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df_monthly = df.set_index("Date").resample("M").sum(numeric_only=True)
df_monthly[["Local Route", "Light Rail", "Peak Service", "Rapid Route", "School"]].plot(
    kind="bar", stacked=True, figsize=(14, 6)
)
plt.xlabel("Month")
plt.ylabel("Passenger Journeys")
plt.title("Comparison of Different Transport Services Over Time")
plt.legend()
plt.grid()
plt.show()

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df['DayOfWeek'] = df['Date'].dt.dayofweek  # Monday = 0, Sunday = 6
df_weekday = df[df['DayOfWeek'] < 5].groupby("DayOfWeek").sum(numeric_only=True)
df_weekend = df[df['DayOfWeek'] >= 5].groupby("DayOfWeek").sum(numeric_only=True)
plt.figure(figsize=(12, 6))
plt.plot(df_weekday.index, df_weekday["Rapid Route"], marker="o", label="Weekdays (Rapid Route)")
plt.plot(df_weekend.index, df_weekend["Rapid Route"], marker="o", label="Weekends (Rapid Route)", linestyle="dashed")
plt.xlabel("Day of the Week (Monday=0, Sunday=6)")
plt.ylabel("Passenger Journeys")
plt.title("Weekday vs. Weekend Public Transport Usage")
plt.legend()
plt.grid()
plt.show()

from sklearn.linear_model import Ridge
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import make_pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
import numpy as np
data = melted_df.copy()
data['DayOfWeek'] = data['Date'].dt.dayofweek
data['Month'] = data['Date'].dt.month
data['Year'] = data['Date'].dt.year
data['DayOfMonth'] = data['Date'].dt.day
model_data = data[['Date', 'Service Type', 'Journeys', 'DayOfWeek', 'Month', 'is_weekend', 'DayOfMonth']].dropna()
X = model_data.drop(columns=['Journeys', 'Date'])
y = model_data['Journeys']

import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
X_encoded = pd.get_dummies(X_train)
X_test_encoded = pd.get_dummies(X_test)
X_encoded, X_test_encoded = X_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)
alpha_value = 1.0
model = Ridge(alpha=alpha_value)
model.fit(X_encoded, y_train)
predictions = model.predict(X_test_encoded)

categorical = ['Service Type']
numerical = ['DayOfWeek', 'Month', 'DayOfMonth', 'is_weekend']

preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical),
    ('num', 'passthrough', numerical)
])
model = make_pipeline(preprocessor, Ridge(alpha=1.0))
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.1)
model.fit(X_train, y_train)

from datetime import timedelta
future_dates = [last_date + timedelta(days=i) for i in range(1, 8)]
service_types = data['Service Type'].unique()
future_df = pd.DataFrame([
    {
        'Date': d,
        'Service Type': service,
        'DayOfWeek': d.dayofweek,
        'Month': d.month,
        'DayOfMonth': d.day,
        'is_weekend': d.weekday() >= 5
    }
    for d in future_dates
    for service in service_types
])
future_df['Forecasted Journeys'] = model.predict(future_df.drop(columns=['Date']))
future_df[['Date', 'Service Type', 'Forecasted Journeys']]

plt.figure(figsize=(12,6))
sns.lineplot(data=future_df, x='Date', y='Forecasted Journeys', hue='Service Type', marker="o")
plt.title("Forecasted Passenger Journeys for Next 7 Days")
plt.ylabel("Predicted Journeys")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()